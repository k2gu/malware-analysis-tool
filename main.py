from __future__ import print_function
from future import standard_library

standard_library.install_aliases()

from urllib.parse import urlencode
from urllib.request import urlopen, Request
from collections import Counter
from builtins import input
import hashlib
import json

virusTotalApiKey = 'a20c2d560621eeb0d656d8fa2b2882041ce868db18f4753d3f707ddf82542041'
file_hash = '7657fcb7d772448a6d8504e4b20168b8'
clean_file_sha256 = 'e37cc2881c874e8ef6a610f3a4223e7eb07f6243592097a4b2da4260d2de14a3'

virusTotalScanFileUrl = 'https://www.virustotal.com/vtapi/v2/file/scan'
virusTotalGetReportUrl = 'https://www.virustotal.com/vtapi/v2/file/report'
virusTotalScanHashUrl = 'https://www.virustotal.com/vtapi/v2/file/rescan'

scan_result_list = list()


def get_user_path_choice():
    return input('Please select a file by specifying a path to the file: ')


def md5(file):

    hash_md5 = hashlib.md5()
    with open(file, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
          hash_md5.update(chunk)
    return hash_md5.hexdigest()


def virus_total_scan_hash(file_hash_to_scan):

    print('Just a second, scanning to see if uploaded file is already scanned by someone...')
    params = dict({
        'apikey': virusTotalApiKey,
        'resource': file_hash_to_scan,
    })
    data = urlencode(params).encode('utf-8')

    request = Request(virusTotalScanHashUrl, data)

    response = urlopen(request)
    return response


def virus_total_post_file():

    print('Uploading file to Virus Total...')
    file_to_open = get_user_path_choice()
    file_to_upload = (file_to_open, open(file_to_open, 'rb'))
    params = dict({
        'apikey': virusTotalApiKey,
        'file': file_to_upload
    })
    data = urlencode(params).encode('utf-8')
    request = Request(virusTotalScanFileUrl, data)

    response = urlopen(request)
    return parse_response(response)


def virus_total_get_report():

    print('Getting a response...')
    params = dict({
        'apikey': virusTotalApiKey,
        'resource': file_hash,
    })
    data = urlencode(params).encode('utf-8')
    request = Request(virusTotalGetReportUrl, data)
    response = urlopen(request)

    parsed_response = parse_response(response)

    return parsed_response


def get_response_code(response):

    response_to_json = parse_response(response)
    return response_to_json['response_code']


def parse_response(response):

    if not isinstance(response, str):
        response = response.read().decode('utf-8')
    response = json.loads(response)
    return response


def is_file_malicious(parsed_response):

    positive_matches_found = parsed_response['positives']
    if positive_matches_found > 0:
        print('File declared malicious by ' + str(positive_matches_found) + ' antivirus engines')
        print('Writing a report...')
        return True
    else:
        print('The file scanned is not malicious.')
        return False


def get_brief_summary():

    results = [result.upper() for result in scan_result_list]
    get_counts = Counter(results)
    print('The most commonly found results were: ')
    print(get_counts.most_common(3))


def write_report(response):

    file_report = open(get_user_path_choice(), "w+")

    scan_list = response['scans']
    engines = scan_list.keys()
    file_report.write("VIRUS TOTAL RESULTS \n")
    file_report.write("Scanned file: " + response['md5'] + " \n")

    for engine_result in engines:
        current_scan = scan_list[engine_result]
        if current_scan['detected']:
            version = current_scan['version']
            result = current_scan['result']
            date = current_scan['update']

            file_report.write("\tEngine: " + engine_result + " \n")
            file_report.write("\tVersion: " + version + " \n")
            file_report.write("\tScan result: " + result + " \n")
            file_report.write("\tDate scanned: " + date + " \n")
            scan_result_list.append(result)

    file_report.close()


def main():

    md5_hash = md5(get_user_path_choice())
    hash_scan_result = virus_total_scan_hash(md5_hash)
    scan_response_code = get_response_code(hash_scan_result)
    if scan_response_code == 1:
        response = virus_total_get_report()
        if is_file_malicious(response):
            write_report(response)
            get_brief_summary()
            return
    virus_total_post_file()
    main()
    print('File is not found from any anti virus databases.')


if __name__ == "__main__":
    main()
